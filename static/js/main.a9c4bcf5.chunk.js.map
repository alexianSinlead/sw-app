{"version":3,"sources":["logo.svg","configs.js","pages/ThirdPage.js","routes.js","pages/Home.js","pages/SecondPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","subDirectory","Boolean","window","location","hostname","match","ThirdPage","routes","name","path","component","className","configs","App","basename","src","logo","alt","process","map","key","to","route","exact","isLocalhost","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,iBCA3CD,EAAOC,QAAU,WAaf,MAAO,CACLC,aAXkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAKsC,UAAY,M,uMCJ3CC,ICEAC,EANA,CACb,CAAEC,KAAM,OAAQC,KAAM,IAAKC,UCL7B,WACE,OACE,yBAAKC,UAAU,aAAf,UDIF,CAAEH,KAAM,SAAUC,KAAM,UAAWC,UENrC,WACE,OACE,yBAAKC,UAAU,mBAAf,gBFKF,CAAEH,KAAM,QAASC,KAAM,SAAUC,UDPnC,WACE,OACE,yBAAKC,UAAU,kBAAf,gB,QISIX,E,OAAiBY,EAAjBZ,aAuCOa,MArCf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAUd,GAChB,yBAAKW,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKI,IAAKC,IAAML,UAAU,WAAWM,IAAI,SACzC,2CAGA,4BACE,4BAAKC,WAEHX,EAAOY,KAAI,gBAAEX,EAAF,EAAEA,KAAMC,EAAR,EAAQA,KAAR,OACT,wBAAIW,IAAKZ,GACP,kBAAC,IAAD,CAAMa,GAAE,UAAKH,WAAL,OAA8BT,IAASD,SAMzD,yBAAKG,UAAU,kBACb,kBAAC,IAAD,KACIJ,EAAOY,KAAI,SAACG,GAAD,OACX,kBAAC,IAAD,eACEC,OAAK,EACLH,IAAKE,EAAMb,MACPa,EAHN,CAIEb,KAAI,UAAKS,WAAL,OAA8BI,EAAMb,iBC9BlDe,EAAcvB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyCN,SAASoB,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC7FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAIzE,GADkB,IAAIqB,IAAI/B,UAAwBhB,OAAOC,SAAS+C,MACpDC,SAAWjD,OAAOC,SAASgD,OAIvC,OAIFjD,OAAOkD,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMR,UAAN,sBAGPM,IAgEV,SAAiCE,EAAOC,GAEtC0B,MAAM3B,GACHK,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7B7B,OAAOC,SAAS2D,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCzC/BE,K","file":"static/js/main.a9c4bcf5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = function() {\n  const PRODUCTION = process.env.NODE_ENV === 'production';\n\n  const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n\n  return {\n    subDirectory: PRODUCTION && isLocalhost ? 'sw-app/' : '',\n  }\n}","import React from 'react';\n\nfunction ThirdPage() {\n  return (\n    <div className=\"ThirdPage page\">\n      ThirdPage\n    </div>\n  );\n}\n\nexport default ThirdPage;\n","import React from \"react\";\n\nimport Home from 'pages/Home.js';\nimport SecondPage from 'pages/SecondPage.js';\nimport ThirdPage from 'pages/ThirdPage.js';\n\nconst routes = [\n  { name: 'home', path: '/', component: Home },\n  { name: 'second', path: '/second', component: SecondPage },\n  { name: 'third', path: '/third', component: ThirdPage },\n];\n\nexport default routes;","import React from 'react';\n\nfunction Home() {\n  return (\n    <div className=\"Home page\">\n      Home\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction SecondPage() {\n  return (\n    <div className=\"SecondPage page\">\n      SecondPage\n    </div>\n  );\n}\n\nexport default SecondPage;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport logo from './logo.svg';\nimport './App.css';\nimport routes from './routes';\nimport configs from './configs';\n\nconst { subDirectory } = configs\n\nfunction App() {\n  return (\n    <Router basename={subDirectory}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            SW App here.\n          </p>\n          <ul>\n            <li>{process.env.PUBLIC_URL}</li>\n            {\n              routes.map(({name, path}) => (\n                <li key={name}>\n                  <Link to={`${process.env.PUBLIC_URL}${path}`}>{name}</Link>\n                </li>\n              ))\n            }\n          </ul>\n        </header>\n        <div className=\"main-container\">\n          <Switch>\n            { routes.map((route) => (\n              <Route \n                exact\n                key={route.path}\n                {...route}\n                path={`${process.env.PUBLIC_URL}${route.path}`}\n              />\n            ))}\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  // if (true) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    \n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();"],"sourceRoot":""}